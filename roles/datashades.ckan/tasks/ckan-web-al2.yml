---
# Installs CKAN onto a web instance and configures it fully.

- name: Install Python Postgres
  yum:
    name:
      - python-psycopg2
      - postgresql
      - postgresql-devel
    state: latest

- name: Install Nginx site configuration.
  template:
    src: nginx/site.conf.j2
    dest: /etc/nginx/conf.d/{{ ansible_local.environment.environment_type }}_ckan.conf
    owner: nginx
    group: nginx
    mode: 0755
  notify: restart nginx
  tags: nginx-web_config

- name: Create CKAN directory
  file:
    path: /usr/lib/ckan
    state: directory
    owner: ckan
    group: ckan

- name: Create CKAN configuration directory
  file:
    path: /etc/ckan/default
    state: directory
    owner: ckan
    group: ckan

- name: Create CKAN storage directory
  file:
    path: /var/shared_content/{{ ansible_local.environment.environment_type }}_ckan
    state: directory
    owner: ckan
    group: ckan
    mode: 0777

- name: Create CKAN Beaker session directory
  file:
    path: /var/shared_content/{{ ansible_local.environment.environment_type }}_ckan/sessions
    state: directory
    owner: ckan
    group: ckan
    mode: 0777

- name: Install the required setuptools version
  pip:
    name: setuptools
    version: "44.1.0"
    virtualenv: /usr/lib/ckan/default
    virtualenv_python: /opt/pyenv/shims/python

- name: Upgrade Pip
  pip:
    name: pip
    state: latest
    virtualenv: /usr/lib/ckan/default
  tags: upgrade_pip

- name: Install CKAN into virtualenv
  shell: /usr/lib/ckan/default/bin/pip install -e 'git+https://github.com/ckan/ckan.git@2.9#egg=ckan'
  args:
    creates: /usr/lib/ckan/default/src/ckan/requirements.txt
  tags: ckan_install-release

- name: Install CKAN requirements
  pip:
    requirements: /usr/lib/ckan/default/src/ckan/requirements.txt
    virtualenv: /usr/lib/ckan/default
  tags: ckan_requirements

#- name: Install CKAN DEV requirements
#  pip:
#    requirements: /usr/lib/ckan/default/src/ckan/dev-requirements.txt
#    virtualenv: /usr/lib/ckan/default
#  tags: ckan_requirements

- name: Set ownership of CKAN files to CKAN's user
  file:
    path: /usr/lib/ckan/default
    owner: ckan
    group: ckan
    recurse: yes

# Do configuration tasks
- include: ckan-configuration.yml
  when: host_type == "web"
- include: ckan-standalone-configuration.yml
  when: host_type == "standalone"

- name: Install uWSGI into the CKAN virtualenv
  pip:
    name: uwsgi
    virtualenv: /usr/lib/ckan/default

- name: Copy WSGI file to CKAN configuration directory
  copy:
    src: wsgi.py
    dest: /etc/ckan/default/wsgi.py
    owner: ckan
    group: ckan
    mode: 0755

- name: Copy uWSGI ini file to CKAN configuration directory
  template:
    src: uwsgi/ckan-uwsgi.j2
    dest: /etc/ckan/default/ckan-uwsgi.ini
    owner: ckan
    group: ckan
    mode: 0755

- name: Copy CKAN supervisor configuration
  template:
    src: ckan-uwsgi-supervisor.j2
    dest: /etc/supervisord.d/ckan-uwsgi.conf
  notify: restart supervisord

- name: Create logging directory for CKAN
  file:
    path: /var/log/{{ ansible_local.environment.environment_type }}_ckan/
    state: directory

- name: Copy CKAN DB setup script and execute
  block:
    - template:
        src: install_ckan_dbuser.py.j2
        dest: /root/install_ckan_dbuser.py
        mode: 0755
    - shell: /root/install_ckan_dbuser.py >> /root/install_ckan_dbuser.log
      args:
        creates: /root/install_ckan_dbuser.log

- name: Copy Datastore DB setup script and execute
  block:
    - template:
        src: install_datastore_dbuser.py.j2
        dest: /root/install_datastore_dbuser.py
        mode: 0755
    - shell: /root/install_datastore_dbuser.py >> /root/install_datastore_dbuser.log
      args:
        creates: /root/install_datastore_dbuser.log

- name: Initialise the CKAN database
  shell: /usr/lib/ckan/default/bin/ckan -c /etc/ckan/default/production.ini db init >> /root/ckan_db_init.log
  args:
    creates: /root/ckan_db_init.log

- name: Create default CKAN user and provide sysadmin permissions
  block:
    - shell: /usr/lib/ckan/default/bin/ckan -c /etc/ckan/default/production.ini user add sysadmin password="{{ ansible_local.environment.db_password }}" email="{{ email }}" >> /root/sysadmin_user.log
      args:
        creates: /root/sysadmin_user.log
    - shell: /usr/lib/ckan/default/bin/ckan -c /etc/ckan/default/production.ini sysadmin add sysadmin >> /root/sysadin_permissions.log
      args:
        creates: /root/sysadmin_permissions.log

- name: Set ownership of CKAN storage to CKAN's user
  file:
    path: /var/shared_content/{{ ansible_local.environment.environment_type }}_ckan/
    owner: ckan
    group: ckan
    recurse: yes

- name: Create logrotate configuration for CKAN under Supervisor.
  template:
    src: logrotate-ckan.j2
    dest: /etc/logrotate.d/ckan
    owner: root
    group: root
    mode: 0644

# Actions solely for standalone instance, included here to avoid having to call the worker role for only two tasks
- name: Install CKAN worker daemon
  template:
    src: ckan-worker.conf.j2
    dest: /etc/supervisord.d/ckan-worker.conf
    owner: ckan
    group: ckan
  when: host_type == "standalone"

- name: Restart Supervisor
  systemd:
    name: supervisord
    state: restarted
