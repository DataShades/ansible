#!/usr/bin/python
#
# Create DB resources and permissions for CKAN Datastore extension
#

{% set postgres_user = 'postgres' if (ansible_local.environment.rds_id == "NA") else 'ckan_dba' %}

import sys
sys.path.append("/usr/lib/ckan/default/lib/python2.7/site-packages")
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

try:
{% if host_type != "standalone" %}
    conn = psycopg2.connect("dbname='postgres' user='{{ postgres_user }}' host='{{ ansible_local.environment.environment_type }}pg.{{ ansible_local.dns.hosted_zone }}' password='{{ ansible_local.environment.db_password }}'")
{% else %}
    conn = psycopg2.connect("dbname='postgres' user='{{ postgres_user }}' host='127.0.0.1' password='{{ ansible_local.environment.db_password }}'")
{% endif %}
except:
    sys.exit(1)

conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)

cur = conn.cursor()
cur.execute("""CREATE USER ckan_datastore_rw WITH PASSWORD '{{ ansible_local.environment.db_password }}' LOGIN;""")
cur.execute("""CREATE USER ckan_datastore_ro WITH PASSWORD '{{ ansible_local.environment.db_password }}' LOGIN;""")

cur.execute("""GRANT ckan_datastore_rw TO {{ postgres_user }};""")
#cur.execute("""GRANT rds_superuser TO ckan_datastore_rw;""")

cur.execute("""CREATE DATABASE ckan_datastore WITH OWNER ckan_datastore_rw ENCODING 'utf-8';""")

conn.commit()
cur.close()
conn.close()

try:
{% if host_type != "standalone" %}
    conn = psycopg2.connect("dbname='ckan_datastore' user='ckan_datastore_rw' host='{{ ansible_local.environment.environment_type }}pg.{{ ansible_local.dns.hosted_zone }}' password='{{ ansible_local.environment.db_password }}'")
{% else %}
    conn = psycopg2.connect("dbname='ckan_datastore' user='ckan_datastore_rw' host='127.0.0.1' password='{{ ansible_local.environment.db_password }}'")
{% endif %}
except:
    sys.exit(1)

cur = conn.cursor()

cur.execute("""GRANT all privileges on all tables in schema public to ckan_datastore_rw;""")
cur.execute("""GRANT all privileges on all sequences in schema public to ckan_datastore_rw;""")
cur.execute("""ALTER default privileges in schema public grant all privileges on tables to ckan_datastore_rw;""")
cur.execute("""ALTER default privileges in schema public grant all privileges on sequences to ckan_datastore_rw;""")

conn.commit()
cur.close()
conn.close()

try:
{% if host_type != "standalone" %}
    conn = psycopg2.connect("dbname='ckan_datastore' user='ckan_datastore_rw' host='{{ ansible_local.environment.environment_type }}pg.{{ ansible_local.dns.hosted_zone }}' password='{{ ansible_local.environment.db_password }}'")
{% else %}
    conn = psycopg2.connect("dbname='ckan_datastore' user='ckan_datastore_rw' host='127.0.0.1' password='{{ ansible_local.environment.db_password }}'")
{% endif %}
except:
    sys.exit(1)

cur = conn.cursor()

# revoke permissions for the read-only user
cur.execute("""REVOKE CREATE ON SCHEMA public FROM PUBLIC;""")
cur.execute("""REVOKE USAGE ON SCHEMA public FROM PUBLIC;""")

cur.execute("""GRANT CREATE ON SCHEMA public TO ckan_default;""")
cur.execute("""GRANT USAGE ON SCHEMA public TO ckan_default;""")

cur.execute("""GRANT CREATE ON SCHEMA public TO ckan_datastore_rw;""")
cur.execute("""GRANT USAGE ON SCHEMA public TO ckan_datastore_rw;""")

# take connect permissions from main db
cur.execute("""REVOKE CONNECT ON DATABASE ckan_default FROM ckan_datastore_ro;""")

# grant select permissions for read-only user
cur.execute("""GRANT CONNECT ON DATABASE ckan_datastore TO ckan_datastore_ro;""")
cur.execute("""GRANT USAGE ON SCHEMA public TO ckan_datastore_ro;""")

# grant access to current tables and views to read-only user
cur.execute("""GRANT SELECT ON ALL TABLES IN SCHEMA public TO ckan_datastore_ro;""")

# grant access to new tables and views by default
cur.execute("""ALTER DEFAULT PRIVILEGES FOR USER ckan_datastore_rw IN SCHEMA public GRANT SELECT ON TABLES TO ckan_datastore_ro;""")

cur.execute("""CREATE OR REPLACE VIEW "_table_metadata" AS
    SELECT DISTINCT
        substr(md5(dependee.relname || COALESCE(dependent.relname, '')), 0, 17) AS "_id",
        dependee.relname AS name,
        dependee.oid AS oid,
        dependent.relname AS alias_of
        -- dependent.oid AS oid
    FROM
        pg_class AS dependee
        LEFT OUTER JOIN pg_rewrite AS r ON r.ev_class = dependee.oid
        LEFT OUTER JOIN pg_depend AS d ON d.objid = r.oid
        LEFT OUTER JOIN pg_class AS dependent ON d.refobjid = dependent.oid
    WHERE
        (dependee.oid != dependent.oid OR dependent.oid IS NULL) AND
        (dependee.relname IN (SELECT tablename FROM pg_catalog.pg_tables)
            OR dependee.relname IN (SELECT viewname FROM pg_catalog.pg_views)) AND
        dependee.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname='public')
    ORDER BY dependee.oid DESC;""")

cur.execute("""ALTER VIEW "_table_metadata" OWNER TO ckan_datastore_rw;""")
cur.execute("""GRANT SELECT ON "_table_metadata" TO ckan_datastore_ro;""")

conn.commit()
cur.close()
conn.close()
